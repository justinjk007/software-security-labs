#+OPTIONS: toc:nil num:nil
#+TITLE: LAB 2 - REPORT
#+AUTHOR: Justin Kaipada - 100590167
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt,letterpaper]
#+LATEX_HEADER: \usepackage[letterpaper,margin=1.3in]{geometry}
#+LATEX_HEADER: \usepackage{plex-mono}
#+LATEX_HEADER: \usepackage[sfdefault]{plex-sans}
#+LATEX_HEADER: \linespread{1.5} % Change line spacing
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{soul}
#+LATEX_HEADER: \usepackage{helvet}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \setlength{\parindent}{0pt} % Change the paragraphs indent to 0, disabling it
#+LATEX_HEADER: \usepackage{xcolor-solarized}
#+LATEX_HEADER: \definecolor{foreground}{RGB}{184, 83, 83} % For verbatim
#+LATEX_HEADER: \definecolor{background}{RGB}{255, 231, 231} % For verbatim
#+LATEX_HEADER: \let\OldTexttt\texttt
#+LATEX_HEADER: \renewcommand{\texttt}[1]{\OldTexttt{\footnotesize\colorbox{background}{\textcolor{foreground}{#1}}}}
#+LATEX_HEADER: \newenvironment{helvetica}{\fontfamily{phv}\selectfont}{\par}
#+LATEX_HEADER: \usepackage{hyperref} % Make the hyper-links prettier
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER: colorlinks=true,
#+LATEX_HEADER: linkcolor=blue!70!white,
#+LATEX_HEADER: urlcolor=blue!95!black
#+LATEX_HEADER: }
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \setlist[1]{itemsep=5pt}
#+LATEX_HEADER: \lstset{ 
#+LATEX_HEADER:  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}; should come as last argument
#+LATEX_HEADER:  basicstyle=\scriptsize,          % the size of the fonts that are used for the code
#+LATEX_HEADER:  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
#+LATEX_HEADER:  breaklines=true,                 % sets automatic line breaking
#+LATEX_HEADER:  captionpos=b,                    % sets the caption-position to bottom
#+LATEX_HEADER:  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
#+LATEX_HEADER:  firstnumber=1000,                % start line enumeration with line 1000
#+LATEX_HEADER:  frame=single,	                  % adds a frame around the code
#+LATEX_HEADER:  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
#+LATEX_HEADER:  keywordstyle=\color{blue},       % keyword style
#+LATEX_HEADER:  language=bash,                   % the language of the code
#+LATEX_HEADER:  morekeywords={ls,ping},          % if you want to add more keywords to the set
#+LATEX_HEADER:  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
#+LATEX_HEADER:  numbersep=5pt,                   % how far the line-numbers are from the code
#+LATEX_HEADER:  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
#+LATEX_HEADER:  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
#+LATEX_HEADER:  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
#+LATEX_HEADER:  showstringspaces=false,          % underline spaces within strings only
#+LATEX_HEADER:  showtabs=false,                  % show tabs within strings adding particular underscores
#+LATEX_HEADER:  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
#+LATEX_HEADER:  stringstyle=\color{black},     % string literal style
#+LATEX_HEADER:  tabsize=2,	                  % sets default tabsize to 2 spaces
#+LATEX_HEADER:  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
#+LATEX_HEADER: }

#+begin_export latex
\newpage % Go to the next page after title page
#+end_export

* Task #1: Experiencing Capabilities

By default ping was a =Set-UID= program
#+begin_src bash
justin@justin-Precision-3520 11:22:57 ~
$ ls -l /bin/ping
-rwsr-xr-x 1 root root 64424 Jun 28  2019 /bin/ping
#+end_src

After changing
#+begin_src bash
root@justin-Precision-3520:/home/justin# ls -l /bin/ping
-rwxr-xr-x 1 root root 64424 Jun 28  2019 /bin/ping
#+end_src

Before changing ping
#+begin_src bash
justin@justin-Precision-3520 11:22:45 ~
$ ping www.google.com
PING www.google.com (172.217.1.4) 56(84) bytes of data.
64 bytes from yyz10s14-in-f4.1e100.net (172.217.1.4): icmp_seq=1 ttl=54 time=9.98 ms
64 bytes from yyz10s14-in-f4.1e100.net (172.217.1.4): icmp_seq=2 ttl=54 time=10.1 ms
64 bytes from yyz10s14-in-f4.1e100.net (172.217.1.4): icmp_seq=3 ttl=54 time=12.8 ms
64 bytes from yyz10s14-in-f4.1e100.net (172.217.1.4): icmp_seq=4 ttl=54 time=7.64 ms
64 bytes from yyz10s14-in-f4.1e100.net (172.217.1.4): icmp_seq=5 ttl=54 time=12.4 ms
^C
--- www.google.com ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4004ms
rtt min/avg/max/mdev = 7.648/10.612/12.819/1.875 ms
#+end_src

After changing ping to =non-Set-UID= program
#+begin_src bash
justin@justin-Precision-3520 11:35:52 ~
$ ping google.com
ping: socket: Operation not permitted
#+end_src

To fix ping to work again, I used setcap to give it the capability to open new ports
#+begin_src sh
setcap cap_net_raw+ep /bin/ping
#+end_src

** Question 1
First I stripped =passwd= all of its coarse permissions
#+begin_src bash
chmod u-s /usr/bin/passwd 
#+end_src

Then fine tuned its capabilities using the setcap command
#+begin_src bash
setcap cap_fowner,cap_chown,cap_dac_override+ep /usr/bin/passwd
#+end_src

One of the observations made here was that when giving multiple
capabilities using the setcap command the capabilities need to be
mentioned at the same time or they will get overwritten. Adding
capabilities one at time does not seem to be possible.

** Question 2
*** 1. =cap_dac_read_search=
The main reason to give this capability is to enable a program to bypass file read permission check,
and bypass read and execution permissions for directories.

To demonstrate the usage, I am trying to open a unreadable txt file with =cat= utility after giving
it this capability.

[[./img/example1.png]]

*** 2. =cap_dac_override=
This capability gives a program t bypass read, write and execute permission checks. Programs that
needs to access system resource for a user without giving the user direct access to those resources
needs these capabilities. For example the =passwd= utility needs to access =/etc/shadow= file which
is owned by root, but the same file needs to be modified by other users as well.

#+begin_src bash
sudo setcap cap_fowner,cap_chown,cap_dac_override+ep /usr/bin/passwd
#+end_src

[[./img/example2.png]]

As you can see in the example once the program was enough capabilities, it started working again

*** 3. =cap_chown=
Like the name suggests this capability gives the program the ability to manipulate a files ownership
and its group ownership, this is done by changing its UIDs and GIDs. Again =passwd= is an example
utility that needs these capability.

#+begin_src bash
sudo setcap cap_fowner,cap_chown,cap_dac_override+ep /usr/bin/passwd
#+end_src

*** 4. =cap_setuid=
Like the name suggests, this capability enables a process to make arbitrary manipulations to any
files UIDs. This capability also enables a process to create UIDs when working with UNIX domain
sockets. This also can change the UID to map the file or program into a different user space.

One of the main uses with having this capability is to change UIDs, so a program can do some
un-privileged work and come back to a normal process in a safe manner.

Programs that require this capability needs them to make other processes that needs to do privileged
actions.

*** 5. =cap_kill=

This capability gives a process the ability bypass the permissions required to send signals. This is
mostly used by daemon programs that needs to manage other processes.

#+begin_src bash
sudo setcap cap_kill+ep ./example
#+end_src
*** 6. =cap_net_raw=

This capability gives a processes the ability to bind to any IP address, as well as give them the
ability to use RAW and PACKET sockets. An example program that needs this would be =ping=

You can see how =ping= won't work without this permission in the following example.
[[./img/example3.png]]

* Task #2: Adjusting Privileges
** Question 3
After building =use_cap= running it produced the following output
#+begin_src bash
$ ./use_cap 
(a) Open failed
(b) Open failed
#+end_src

Gave it the required capabilities like this
#+begin_src sh
sudo setcap cap_dac_read_search+ep ./use_cap
#+end_src

Running again after giving =cap_dac_read_search= capability
#+begin_src sh
$ ./use_cap 
(b) Open failed
(d) Open failed
(e) Open failed
#+end_src

Before giving the capability *a* and *b* failed because =/etc/shadow= is owned by root and requires more
privileges to be opened, then the program exited because enabling =CAP_DAC_READ_SEARCH= failed.

After giving the capability, *a* passed because now the process can override permissions. Then
=cap_disable(CAP_DAC_READ_SEARCH)= was called. So when *b* tried to open the file again privileges
were not enough. Then before *c* =cap_enable(CAP_DAC_READ_SEARCH)= was called which enabled the
capability again, so *c* passed. Then the function call to drop the capability was called. So after
that *d* and *e* failed because once dropped they can't be enabled back again.
** Question 4
To dynamically adjust access control on linux we can use the =chmod= command
with which we can specify if a file should be readable, writable and executable
by the user, people in the user group and all the people on the system.

Most of the time we don't need fine adjustments to file access. So using =chmod=
commands are easier and more convenient than setting specific capabilities.
** Question 5
If the capability was just disabled, it can be enabled at any time, so if the
attacker gained access to the program he can use this capability.

If the capability was deleted, it cannot be enabled anymore, so if the attacker
gained access to the program he still can't enable and use this capability.
** Question 6
If the capability was just disabled, it can be enabled at any time, so if the
attacker gained access to the program he can use this capability.

When using race condition attack, if the attacker manages to stop the program
from deleting the capability he can use it, but if he gained access to the
program after deletion he still can't enable and use this capability.

